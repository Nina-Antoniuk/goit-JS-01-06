/*
 * –†–∞–±–æ—Ç–µ–º —Å –∫–æ–ª–ª–µ–∫—Ü–∏–µ–π —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ:
 * - getItems()
 * - add(product)
 * - remove(productName)
 * - clear()
 * - countTotalPrice()
 * - increaseQuantity(productName)
 * - decreaseQuantity(productName)
 */

const cart = {
  items: [],
  getItems() {
    return this.items;
  },
  add(product) {
    const items = this.items;
    for (let item of items) {
      if (item.name === product.name) {
        this.increaseQuantity(product.name);
        return 
      }
    }
    let newProduct = {
      ...product,
      quantity: 1
    }
    return items.push(newProduct);
  },
  remove(productName) {
    const { items } = this;
    for (let i = 0; i < items.length; i += 1) {
      if (items[i].name === productName) {
        items.splice(i, 1)
      }
    }
   },
  clear() {
    return items = [];
  },
  
  countTotalPrice() {
    let totalPrice = 0;
    for (let item of this.items) {
      totalPrice += item.price;
    }
    return totalPrice;
  },
  increaseQuantity(productName) {
    for (let item of this.items) {
      if (item.name === productName) {
        item.quantity += 1;
        item.price *= item.quantity;
      }
    }
  }, 
  decreaseQuantity(productName) {
    for (let item of this.items) {
      if (item.name === productName) {
        item.price /= item.quantity;
        item.quantity -= 1;
        item.price *= item.quantity;
      }
    }
   },
}

console.log(cart.getItems());

cart.add({ name: 'üçá', price: 70 });
cart.add({ name: 'üçé', price: 50 });
cart.add({ name: 'üçá', price: 70 });
cart.add({ name: 'üçã', price: 60 });
cart.add({ name: 'üçì', price: 110 });
cart.add({ name: 'üçì', price: 110 });

console.table(cart.getItems());




//v2
// function countProps(object) {
  
//   let propCount = 0;

//  propCount = (Object.keys(object)).length;

//   return propCount;
  
// }

// –ú–æ–∂–µ–º –ª–∏ –º—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å this –≤–º–µ—Å—Ç–æ hotel –≤ —ç—Ç–æ–º –ø—Ä–∏–º–µ—Ä–µ –∏–∑ –∫–æ–Ω—Å–ø–µ–∫—Ç–∞?
// const
//   hotel = {
//   name: "Resort Hotel",
//   stars: 5,
//   capacity: 100,
// };

// const keys = Object.keys(hotel);
// const values = Object.values(hotel);
// const entries = Object.entries(hotel);
// const obj = Object.fromEntries(entries);

// console.log(`keys`, keys);
// console.log(`values`, values);
// console.log(`entries`, entries);
// console.log(`obj`, obj);


// Optional Chaining ?.

// const car = {
//     speed: {
//       value: 150,
//       unit: "mph",
//     },
//     doors: 5,
//   };
// console.log(car.wheels.value);
// console.log(car.speed?.value);
// console.log(car.speed?.whatever);
// console.log(car.speed?.whatever?.value);

// 1)  –ù–∞–ø–∏—à–∏ —Å–∫—Ä–∏–ø—Ç, –∫–æ—Ç–æ—Ä—ã–π, –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ user, –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ:

// –¥–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª–µ mood —Å–æ –∑–Ω–∞—á–µ–Ω–∏–µ–º 'happy'
// –∑–∞–º–µ–Ω—è–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ hobby –Ω–∞ 'skydiving'
// –∑–∞–º–µ–Ω—è–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ premium –Ω–∞ false
// –≤—ã–≤–æ–¥–∏—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ–±—ä–µ–∫—Ç–∞ user –≤ —Ñ–æ—Ä–º–∞—Ç–µ –∫–ª—é—á:–∑–Ω–∞—á–µ–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑—É—è Object.keys() –∏ for...of

const user = {
    name: 'Mango',
    age: 20,
    hobby: 'html',
  premium: true,
  showUser() {
    const keys = Object.keys(this);
    for (let key of keys) {
      return `${key}: ${this[key]}`
    }
  }
};

user.mood = 'happy';
user.hobby = 'skydiving';
user.premium = false;
console.log(user.showUser());


// 2) –£ –Ω–∞—Å –µ—Å—Ç—å –æ–±—ä–µ–∫—Ç, –≤ –∫–æ—Ç–æ—Ä–æ–º —Ö—Ä–∞–Ω—è—Ç—Å—è –∑–∞—Ä–ø–ª–∞—Ç—ã –Ω–∞—à–µ–π –∫–æ–º–∞–Ω–¥—ã.
// –ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–¥ –¥–ª—è —Å—É–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö –∑–∞—Ä–ø–ª–∞—Ç –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π sum.
// –î–æ–ª–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å—Å—è 390. –ï—Å–ª–∏ –æ–±—ä–µ–∫—Ç salaries –ø—É—Å—Ç, —Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 0.

const salaries = {
  John: 100,
  Ann: 160,
  Pete: 130,
  Alisha:
    200,
  sum() {
    let total = 0;
    let allSalaries = Object.values(salaries);
    for (let salary of allSalaries) {
      if (!isNaN(salary)) {
        total += salary;
      };
    }
    return total;
  }
};
console.log('salaryes sum :>> ', salaries.sum());

// 3) –ù–∞–ø–∏—à–∏—Ç–µ —Ñ - —Ü–∏—é calcTotalPrice(stones, stoneName), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –º–∞—Å—Å–∏–≤ –æ–±—å–µ–∫—Ç–æ–≤ –∏ —Å—Ç—Ä–æ–∫—É —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∫–∞–º–Ω—è.
// –§ - —Ü–∏—è —Å—á–∏—Ç–∞–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –∫–∞–º–Ω–µ–π —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º, —Ü–µ–Ω–æ–π –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∏–∑ –æ–±—å–µ–∫—Ç–∞

const stones = [
  { name: "–ò–∑—É–º—Ä—É–¥", price: 1300, quantity: 4 },
  { name: "–ë—Ä–∏–ª–ª–∏–∞–Ω—Ç", price: 2700, quantity: 3 },
  { name: "–°–∞–ø—Ñ–∏—Ä", price: 400, quantity: 7 },
  { name: "–©–µ–±–µ–Ω—å", price: 200, quantity: 2 },
];

function calcTotalPrice(stones, stoneName) {
  let totalPrice = 0;
  for (let {name, price, quantity} of stones) {
    if (stoneName === name) {
     totalPrice = price * quantity
    }
  }
  return totalPrice;
}

console.log(`–ë—Ä–∏–ª–ª–∏–∞–Ω—Ç`, calcTotalPrice(stones, "–ë—Ä–∏–ª–ª–∏–∞–Ω—Ç")); // 8100
console.log('–°–∞–ø—Ñ–∏—Ä', calcTotalPrice(stones, '–°–∞–ø—Ñ–∏—Ä'));

// 4) –°–æ–∑–¥–∞–π—Ç–µ –æ–±—ä–µ–∫—Ç calculator(–∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä) —Å —Ç—Ä–µ–º—è –º–µ—Ç–æ–¥–∞–º–∏:
// read(a, b)- –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –¥–≤–∞ –∑–Ω–∞—á–µ–Ω–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Ö –∫–∞–∫ —Å–≤–æ–π—Å—Ç–≤–∞ –æ–±—ä–µ–∫—Ç–∞.
// sum() - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—É–º–º—É —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π.
// mult() - –ø–µ—Ä–µ–º–Ω–æ–∂–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç.
const calculator = {
  a: 0,
  b: 0,
  read(a, b) {
    this.a = a;
    this.b = b;
  },
  sum() {
    return this.a + this.b;
  },
  mult() {
    return this.a * this.b;
  }
}
calculator.read(4, 5)
console.log(calculator.sum());

// 5) –ù–∞–ø–∏—à–∏ —Å–∫—Ä–∏–ø—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–∏—á–Ω—ã–º –∫–∞–±–∏–Ω–µ—Ç–æ–º –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –±–∞–Ω–∫–∞.
// –ï—Å—Ç—å –æ–±—ä–µ–∫—Ç account –≤ –∫–æ—Ç–æ—Ä–æ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –º–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–ª–∞–Ω—Å–æ–º –∏ –∏—Å—Ç–æ—Ä–∏–µ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π.

// /*
//  * –¢–∏–ø–æ–≤ —Ç—Ä–∞–Ω–∑–∞—Ü–∫–∏–π –≤—Å–µ–≥–æ –¥–≤–∞.
//  * –ú–æ–∂–Ω–æ –ø–æ–ª–æ–∂–∏—Ç—å –ª–∏–±–æ —Å–Ω—è—Ç—å –¥–µ–Ω—å–≥–∏ —Å–æ —Å—á–µ—Ç–∞.
//  */
const Transaction = {
    DEPOSIT: 'deposit',
    WITHDRAW: 'withdraw',
  };

//   /*
//    * –ö–∞–∂–¥–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —ç—Ç–æ –æ–±—ä–µ–∫—Ç —Å–æ —Å–≤–æ–π—Å—Ç–≤–∞–º–∏: id, type –∏ amount
//    */

  const account = {
    // –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å —Å—á–µ—Ç–∞
    balance: 0,

    // –ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    transactions: [],

    /*
     * –ú–µ—Ç–æ–¥ —Å–æ–∑–¥–∞–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.
     * –ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Å—É–º–º—É –∏ —Ç–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.
     */
    createTransaction(amount, type) {
      const id = this.transactions.length + 1
      return { amount, type, id };
    }, 

    /*
     * –ú–µ—Ç–æ–¥ –æ—Ç–≤–µ—á–∞—é—â–∏–π –∑–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—É–º–º—ã –∫ –±–∞–ª–∞–Ω—Å—É.
     * –ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Å—É–º–º—É —Ç–∞–Ω–∑–∞–∫—Ü–∏–∏.
     * –í—ã–∑—ã–≤–∞–µ—Ç createTransaction –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
     * –ø–æ—Å–ª–µ —á–µ–≥–æ –¥–æ–±–∞–≤–ª—è–µ—Ç –µ–≥–æ –≤ –∏—Å—Ç–æ—Ä–∏—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
     */
    deposit(amount) {
      const transaction = this.createTransaction(amount, type = 'deposit');  
      this.transactions.push(transaction);
      return this.balance += amount;
    }, 

    /*
     * –ú–µ—Ç–æ–¥ –æ—Ç–≤–µ—á–∞—é—â–∏–π –∑–∞ —Å–Ω—è—Ç–∏–µ —Å—É–º–º—ã —Å –±–∞–ª–∞–Ω—Å–∞.
     * –ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Å—É–º–º—É —Ç–∞–Ω–∑–∞–∫—Ü–∏–∏.
     * –í—ã–∑—ã–≤–∞–µ—Ç createTransaction –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
     * –ø–æ—Å–ª–µ —á–µ–≥–æ –¥–æ–±–∞–≤–ª—è–µ—Ç –µ–≥–æ –≤ –∏—Å—Ç–æ—Ä–∏—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π.
     *
     * –ï—Å–ª–∏ amount –±–æ–ª—å—à–µ —á–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å, –≤—ã–≤–æ–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ
     * –æ —Ç–æ–º, —á—Ç–æ —Å–Ω—è—Ç–∏–µ —Ç–∞–∫–æ–π —Å—É–º–º—ã –Ω–µ –≤–æ–∑–º–æ–∂–Ω–æ, –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤.
     */
    withdraw(amount) {
      const transaction = this.createTransaction(amount, type = 'withdraw');  
      this.transactions.push(transaction);
      return this.balance -= amount;
    },

    /*
     * –ú–µ—Ç–æ–¥ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å
     */
    getBalance() {
      return this.balance;
    },

    /*
     * –ú–µ—Ç–æ–¥ –∏—â–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç —Ç—Ä–∞–Ω–∑–∞—Ü–∏–∏ –ø–æ id
     */
    getTransactionDetails(id) {
      for (const transaction of this.transactions) {
        let { id: ident } = transaction;
        if (id === ident) {
          return transaction;
        }
      }
    },

    /*
     * –ú–µ—Ç–æ–¥ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ä–µ–¥—Å—Ç–≤
     * –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏–∑ –≤—Å–µ–π –∏—Å—Ç–æ—Ä–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
     */
    getTransactionTotal(type) {
      let total = 0;
      for (const { type: transactionType, amount } of this.transactions) {
        if (type === transactionType) {
          total += amount;
        }
      } return `–û–±—â–∞—è —Å—É–º–º–∞ —Ç—Ä–∞–Ω–∞–∫—Ü–∏–π —Ç–∏–ø–∞: ${type} —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç ${total}`;
    },
};
  
console.log(account.balance);
console.log('balance after transaction type: deposit', account.deposit(400));
console.log('balance after transaction type: withdraw', account.withdraw(200));
account.deposit(300)
account.withdraw(260)
account.deposit(600)
account.withdraw(700)
console.table(account.transactions);
console.log(account.getTransactionDetails(1));
console.log(account.getTransactionTotal('deposit'));